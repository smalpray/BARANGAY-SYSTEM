// import React, { useState } from 'react'
// import { Plus, User, Home, MapPin, Hash, Users } from 'lucide-react';
// import Input from '@/app/_components/input';
// export default function HeadFamSection() {
//     const [errors, setErrors] = useState({});
//     const residents = [
//     { id: 1, name: "Juan Dela Cruz", age: 45 },
//     { id: 2, name: "Maria Santos", age: 38 },
//     { id: 3, name: "Pedro Rodriguez", age: 52 },
//     { id: 4, name: "Ana Garcia", age: 29 },
//     { id: 5, name: "Carlos Mendoza", age: 41 }
//   ];
//  const handleInputChange = (e) => {
//     const { name, value, type, checked } = e.target;
//     setFormData(prev => ({
//       ...prev,
//       [name]: type === 'checkbox' ? checked : value
//     }));
//   };
//     const [formData, setFormData] = useState({
//           familyNumber: '',
//           isAutoGenerated: true,
//           headOfFamily: '',
//           isExistingResident: true,
//           sitio: '',
//           street: '',
//           houseNumber: '',
//           ownershipType: ''
//         });
//   return (
//     <div>
//         <div>
//           <label className="block text-sm font-medium text-gray-700 mb-3">
//             <User className="inline w-4 h-4 mr-1" />
//             Head of Family *
//           </label>

//           <div className="space-y-3">
//             <div className="flex gap-4">
//               <div className="flex items-center">
//                 <input
//                   type="radio"
//                   id="existingResident"
//                   name="residentType"
//                   checked={formData.isExistingResident}
//                   onChange={() => setFormData(prev => ({ ...prev, isExistingResident: true, headOfFamily: '' }))}
//                   className="w-4 h-4 text-green-600 border-gray-300 focus:ring-green-500"
//                 />
//                 <label htmlFor="existingResident" className="ml-2 text-sm text-gray-700">
//                   Select from residents
//                 </label>
//               </div>

//               <div className="flex items-center">
//                 <input
//                   type="radio"
//                   id="manualInput"
//                   name="residentType"
//                   checked={!formData.isExistingResident}
//                   onChange={() => setFormData(prev => ({ ...prev, isExistingResident: false, headOfFamily: '' }))}
//                   className="w-4 h-4 text-green-600 border-gray-300 focus:ring-green-500"
//                 />
//                 <label htmlFor="manualInput" className="ml-2 text-sm text-gray-700">
//                   Manual input
//                 </label>
//               </div>
//             </div>

//             {formData.isExistingResident ? (
//               <div className="w-full">
//                 <div className="relative">
//                   <Users className="absolute left-2 top-1/2 -translate-y-1/2 text-gray-500 w-4 h-4 z-10" />
//                   <select
//                     name="headOfFamily"
//                     value={formData.headOfFamily}
//                     onChange={handleInputChange}
//                     className="w-full pl-10 pr-4 py-2.5 border bg-white rounded-md focus:outline-none transition-all appearance-none"
//                   >
//                     <option value="">Select a resident</option>
//                     {residents.map(resident => (
//                       <option key={resident.id} value={resident.name}>
//                         {resident.name} (Age: {resident.age})
//                       </option>
//                     ))}
//                   </select>
//                 </div>
//                 {errors.headOfFamily && <p className="text-sm text-red-500 mt-1 ml-1">{errors.headOfFamily}</p>}
//               </div>
//             ) : (
//               <Input
//                 label="Head of Family Name"
//                 name="headOfFamily"
//                 value={formData.headOfFamily}
//                 onChange={handleInputChange}
//                 iconLeft={<User className="w-4 h-4" />}
//                 error={errors.headOfFamily}
//                 required
//               />
//             )}
//           </div>
//         </div>
//     </div>
//   )
// }
