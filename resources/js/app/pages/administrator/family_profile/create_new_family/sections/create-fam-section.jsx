import Button from '@/app/_components/button'
import Input from '@/app/_components/input';
import { Plus, User, Home, MapPin, Hash, Users } from 'lucide-react';
import moment from 'moment';
import React, { useState } from 'react'
export default function CreateFamSection() {
  const [errors, setErrors] = useState({});
  const handleSubmit = () => {
    if (!validateForm()) return;

    console.log('Family Data Submitted:', formData);
    alert('New family record created successfully!');

    setFormData({
      familyNumber: formData.isAutoGenerated ? generateFamilyNumber() : '',
      isAutoGenerated: formData.isAutoGenerated,
      headOfFamily: '',
      isExistingResident: true,
      sitio: '',
      street: '',
      houseNumber: '',
      ownershipType: ''
    });

    setErrors({});
  };
  const validateForm = () => {
    const newErrors = {};

    if (!formData.headOfFamily.trim()) {
      newErrors.headOfFamily = 'Head of family is required';
    }

    if (!formData.sitio.trim()) {
      newErrors.sitio = 'Sitio is required';
    }

    if (!formData.ownershipType) {
      newErrors.ownershipType = 'Ownership type is required';
    }

    if (!formData.isAutoGenerated && !formData.familyNumber.trim()) {
      newErrors.familyNumber = 'Family number is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  const [formData, setFormData] = useState({
    familyNumber: '',
    isAutoGenerated: true,
    headOfFamily: '',
    isExistingResident: true,
    sitio: '',
    street: '',
    houseNumber: '',
    ownershipType: ''
  });
  const ownershipTypes = [
        "Owned",
        "Rented",
        "Government Housing",
        "Caretaker",
        "Sharing/Boarding",
        "Others"
    ];
  const residents = [
    { id: 1, name: "Juan Dela Cruz", age: 45 },
    { id: 2, name: "Maria Santos", age: 38 },
    { id: 3, name: "Pedro Rodriguez", age: 52 },
    { id: 4, name: "Ana Garcia", age: 29 },
    { id: 5, name: "Carlos Mendoza", age: 41 }
  ];
  const handleInputChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };
  const handleAutoGenerateToggle = (e) => {
    const isAuto = e.target.checked;
    setFormData(prev => ({
      ...prev,
      isAutoGenerated: isAuto,
      familyNumber: isAuto ? 'FAM-' + moment().format('MMDDYYHHmmss') : ''
    }));
  };

  return (
    <div>
      <label className="block text-sm font-medium text-gray-700 mb-3">
        Family/Household Number *
      </label>
      <div className="space-y-3">
        <div className="flex items-center gap-3">
          <Input
            type="checkbox"
            id="autoGenerate"
            checked={formData.isAutoGenerated}
            onChange={handleAutoGenerateToggle}
            className="w-4 h-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
          />
          <label htmlFor="autoGenerate" className="text-sm text-gray-700">
            Auto-generate family number
          </label>
        </div>

        <Input
          label="Family/Household Number"
          name="familyNumber"
          value={formData.familyNumber}
          onChange={handleInputChange}
          disabled={formData.isAutoGenerated}
          iconLeft={<Hash className="w-4 h-4" />}
          error={errors.familyNumber}
          readOnly={formData.isAutoGenerated}
        />
      </div>
      {/* Head of Family */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">
          <User className="inline w-4 h-4 mr-1" />
          Head of Family *
        </label>

        <div className="space-y-3">
          <div className="flex gap-4">
            <div className="flex items-center">
              <input
                type="radio"
                id="existingResident"
                name="residentType"
                checked={formData.isExistingResident}
                onChange={() => setFormData(prev => ({ ...prev, isExistingResident: true, headOfFamily: '' }))}
                className="w-4 h-4 text-green-600 border-gray-300 focus:ring-green-500"
              />
              <label htmlFor="existingResident" className="ml-2 text-sm text-gray-700">
                Select from residents
              </label>
            </div>

            <div className="flex items-center">
              <input
                type="radio"
                id="manualInput"
                name="residentType"
                checked={!formData.isExistingResident}
                onChange={() => setFormData(prev => ({ ...prev, isExistingResident: false, headOfFamily: '' }))}
                className="w-4 h-4 text-green-600 border-gray-300 focus:ring-green-500"
              />
              <label htmlFor="manualInput" className="ml-2 text-sm text-gray-700">
                Manual input
              </label>
            </div>
          </div>

          {formData.isExistingResident ? (
            <div className="w-full">
              <div className="relative">
                <Users className="absolute left-2 top-1/2 -translate-y-1/2 text-gray-500 w-4 h-4 z-10" />
                <select
                  name="headOfFamily"
                  value={formData.headOfFamily}
                  onChange={handleInputChange}
                  className="w-full pl-10 pr-4 py-2.5 border bg-white rounded-md focus:outline-none transition-all appearance-none"
                >
                  <option value="">Select a resident</option>
                  {residents.map(resident => (
                    <option key={resident.id} value={resident.name}>
                      {resident.name} (Age: {resident.age})
                    </option>
                  ))}
                </select>
              </div>
              {errors.headOfFamily && <p className="text-sm text-red-500 mt-1 ml-1">{errors.headOfFamily}</p>}
            </div>
          ) : (
            <Input
              label="Head of Family Name"
              name="headOfFamily"
              value={formData.headOfFamily}
              onChange={handleInputChange}
              iconLeft={<User className="w-4 h-4" />}
              error={errors.headOfFamily}
              required
            />
          )}
        </div>
      </div>
      {/* Address Section */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">
          <MapPin className="inline w-4 h-4 mr-1" />
          Address *
        </label>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Input
            label="Sitio"
            name="sitio"
            value={formData.sitio}
            onChange={handleInputChange}
            iconLeft={<MapPin className="w-4 h-4" />}
            error={errors.sitio}
            required
          />
          <Input
            label="Street"
            name="street"
            value={formData.street}
            onChange={handleInputChange}
          />
          <Input
            label="House Number"
            name="houseNumber"
            value={formData.houseNumber}
            onChange={handleInputChange}
          />
        </div>
      </div>
      {/* Ownership */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">
          <Home className="inline w-4 h-4 mr-1" />
          Ownership Type *
        </label>

        <div className="relative">
          <Home className="absolute left-2 top-1/2 -translate-y-1/2 text-gray-500 w-4 h-4 z-10" />
          <select
            name="ownershipType"
            value={formData.ownershipType}
            onChange={handleInputChange}
            className="w-full pl-10 pr-4 py-2.5 border bg-white rounded-md focus:outline-none"
          >
            <option value="">Select ownership type</option>
            {ownershipTypes.map(type => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>
          {errors.ownershipType && <p className="text-sm text-red-500 mt-1 ml-1">{errors.ownershipType}</p>}
        </div>
      </div>

      {/* Submit */}
      <div className="pt-4 border-t border-gray-200">
        <Button
          onClick={handleSubmit}
          variant="primary"
          size="lg"
          className="w-full"
        >
          <Plus className="w-5 h-5 mr-2" />
          Create New Family
        </Button>
      </div>
    </div>
  )
}
