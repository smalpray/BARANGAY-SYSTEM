"use client";

import Button from "@/app/_components/button";
import Input from "@/app/_components/input";
import { create_families_service } from "@/app/services/families-service";
import { Plus, User, Home, MapPin, Hash, Users } from "lucide-react";
import moment from "moment";
import React from "react";
import { useForm } from "react-hook-form";
import Swal from "sweetalert2";


export default function CreateFamSection({ onClose }) {
    const {
        register,
        handleSubmit,
        reset,
        watch,
        setValue,
        formState: { errors, isSubmitting },
    } = useForm({
        defaultValues: {
            familyNumber: "",
            isAutoGenerated: true,
            headOfFamily: "",
            isExistingResident: true,
            sitio: "",
            street: "",
            houseNumber: "",
            ownershipType: "",
        },
    });

    const isAutoGenerated = watch("isAutoGenerated");
    const isExistingResident = watch("isExistingResident");

    // Generate family number
    const generateFamilyNumber = () =>
        "FAM-" + moment().format("MMDDYYHHmmss");

    const submitForm = async (data) => {
        try {
            if (data.isAutoGenerated) {
                data.familyNumber = generateFamilyNumber();
            }
            await create_families_service(data);
            await Swal.fire({
                icon: "success",
                title: "Family saved successfully",
                showConfirmButton: false,
                timer: 1500,
            });
            reset();
            onClose && onClose();
        } catch (error) {
            console.error("Error saving family:", error);
            Swal.fire({
                icon: "error",
                title: "Something went wrong",
                text: "Please try again later",
            });
        }
    };

    const ownershipTypes = [
        "Owned",
        "Rented",
        "Government Housing",
        "Caretaker",
        "Sharing/Boarding",
        "Others",
    ];

    const residents = [
        { id: 1, name: "Juan Dela Cruz", age: 45 },
        { id: 2, name: "Maria Santos", age: 38 },
        { id: 3, name: "Pedro Rodriguez", age: 52 },
        { id: 4, name: "Ana Garcia", age: 29 },
        { id: 5, name: "Carlos Mendoza", age: 41 },
    ];

    return (
        <form onSubmit={handleSubmit(submitForm)} className="max-w-7xl mx-auto">
            {/* Family Number Section */}
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                    Family/Household Number *
                </label>
                <div className="space-y-3">
                    <div className="flex items-center gap-3">
                        <input
                            type="checkbox"
                            {...register("isAutoGenerated")}
                            checked={isAutoGenerated}
                            onChange={(e) => {
                                setValue("isAutoGenerated", e.target.checked);
                                if (e.target.checked) {
                                    setValue("familyNumber", generateFamilyNumber());
                                } else {
                                    setValue("familyNumber", "");
                                }
                            }}
                            className="w-4 h-4 text-green-600 border-gray-300 rounded focus:ring-green-500"
                        />
                        <label
                            htmlFor="autoGenerate"
                            className="text-sm text-gray-700"
                        >
                            Auto-generate family number
                        </label>
                    </div>

                    <Input
                        register={register("familyNumber", {
                            required: "Field is required",
                        })}
                        error={errors?.familyNumber?.message}
                        label="Family/Household Number"
                        name="familyNumber"
                        disabled={isAutoGenerated}
                        iconLeft={<Hash className="w-4 h-4" />}
                        readOnly={isAutoGenerated}
                    />
                </div>
            </div>

            {/* Head of Family */}
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                    <User className="inline w-4 h-4 mr-1" />
                    Head of Family *
                </label>

                <div className="space-y-3">
                    <div className="flex gap-4">
                        <label className="flex items-center">
                            <input
                                type="radio"
                                value={true}
                                {...register("isExistingResident")}
                                checked={isExistingResident === true}
                                onChange={() => setValue("isExistingResident", true)}
                                className="w-4 h-4 text-green-600 border-gray-300"
                            />
                            <span className="ml-2 text-sm text-gray-700">
                                Select from residents
                            </span>
                        </label>

                        <label className="flex items-center">
                            <input
                                type="radio"
                                value={false}
                                {...register("isExistingResident")}
                                checked={isExistingResident === false}
                                onChange={() => setValue("isExistingResident", false)}
                                className="w-4 h-4 text-green-600 border-gray-300"
                            />
                            <span className="ml-2 text-sm text-gray-700">
                                Manual input
                            </span>
                        </label>
                    </div>

                    {isExistingResident ? (
                        <div className="w-full">
                            <div className="relative">
                                <Users className="absolute left-2 top-1/2 -translate-y-1/2 text-gray-500 w-4 h-4 z-10" />
                                <select
                                    {...register("headOfFamily", {
                                        required: "Head of family is required",
                                    })}
                                    className="w-full pl-10 pr-4 py-2.5 border bg-white rounded-md"
                                >
                                    <option value="">Select a resident</option>
                                    {residents.map((resident) => (
                                        <option
                                            key={resident.id}
                                            value={resident.name}
                                        >
                                            {resident.name} (Age: {resident.age})
                                        </option>
                                    ))}
                                </select>
                            </div>
                            {errors.headOfFamily && (
                                <p className="text-sm text-red-500 mt-1 ml-1">
                                    {errors.headOfFamily.message}
                                </p>
                            )}
                        </div>
                    ) : (
                        <Input
                            label="Head of Family Name"
                            {...register("headOfFamily", {
                                required: "Head of family is required",
                            })}
                            iconLeft={<User className="w-4 h-4" />}
                            error={errors?.headOfFamily?.message}
                        />
                    )}
                </div>
            </div>

            {/* Address Section */}
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                    <MapPin className="inline w-4 h-4 mr-1" />
                    Address *
                </label>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <Input
                        register={register("sitio", {
                            required: "Field is required",
                        })}
                        error={errors?.sitio?.message}
                        label="Sitio"
                        name="sitio"
                        iconLeft={<MapPin className="w-4 h-4" />}
                    />
                    <Input
                        register={register("street", {
                            required: "Field is required",
                        })}
                        error={errors?.street?.message}
                        label="Street"
                        name="street"
                    />
                    <Input
                        register={register("houseNumber", {
                            required: "Field is required",
                        })}
                        error={errors?.houseNumber?.message}
                        label="House Number"
                        name="houseNumber"
                    />
                </div>
            </div>

            {/* Ownership */}
            <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                    <Home className="inline w-4 h-4 mr-1" />
                    Ownership Type *
                </label>
                <div className="relative">
                    <Home className="absolute left-2 top-1/2 -translate-y-1/2 text-gray-500 w-4 h-4 z-10" />
                    <select
                        {...register("ownershipType", {
                            required: "Ownership type is required",
                        })}
                        className="w-full pl-10 pr-4 py-2.5 border bg-white rounded-md"
                    >
                        <option value="">Select ownership type</option>
                        {ownershipTypes.map((type) => (
                            <option key={type} value={type}>
                                {type}
                            </option>
                        ))}
                    </select>
                    {errors.ownershipType && (
                        <p className="text-sm text-red-500 mt-1 ml-1">
                            {errors.ownershipType.message}
                        </p>
                    )}
                </div>
            </div>

            {/* Submit */}
            <div className="pt-4 border-t border-gray-200">
                <Button
                    disabled={isSubmitting}
                    type="submit"
                    variant="primary"
                    size="lg"
                    className="w-full"
                >
                    <Plus className="w-5 h-5 mr-2" />
                    {isSubmitting ? "Saving..." : "Create New Family"}
                </Button>
            </div>
        </form>
    );
}
